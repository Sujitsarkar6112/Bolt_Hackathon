events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=triton:10m rate=50r/s;
    
    # Upstream definitions
    upstream backend {
        server backend:8000 max_fails=3 fail_timeout=30s;
    }
    
    upstream forecast_service {
        server forecast-service:8002 max_fails=3 fail_timeout=30s;
    }
    
    upstream rag_service {
        server rag-service:8003 max_fails=3 fail_timeout=30s;
    }
    
    upstream gateway_service {
        server gateway-service:8004 max_fails=3 fail_timeout=30s;
    }
    
    upstream triton_guardrails {
        server triton-guardrails:8000 max_fails=3 fail_timeout=30s;
    }
    
    # Frontend server
    server {
        listen 80;
        server_name localhost;
        
        # Frontend static files
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # API Gateway server
    server {
        listen 8080;
        server_name localhost;
        
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Handle preflight requests
        location ~ ^/api/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Backend API with Triton validation
        location /api/chat {
            # First, proxy to backend
            proxy_pass http://backend/chat;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Capture response for validation
            proxy_intercept_errors on;
            error_page 200 = @validate_chat_response;
        }
        
        # Forecast API with Triton validation
        location ~ ^/api/forecast/(.+)$ {
            # First, proxy to forecast service
            proxy_pass http://forecast_service/forecast/$1$is_args$args;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Capture response for validation
            proxy_intercept_errors on;
            error_page 200 = @validate_forecast_response;
        }
        
        # RAG API with Triton validation
        location /api/ask {
            # First, proxy to RAG service
            proxy_pass http://rag_service/ask;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Capture response for validation
            proxy_intercept_errors on;
            error_page 200 = @validate_rag_response;
        }
        
        # WebSocket and SSE gateway (no validation needed)
        location /ws {
            proxy_pass http://gateway_service/chat;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }
        
        location /stream {
            proxy_pass http://gateway_service/stream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 86400;
        }
        
        # Direct service access (bypass validation)
        location /api/health {
            proxy_pass http://backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Triton validation handlers
        location @validate_chat_response {
            internal;
            limit_req zone=triton burst=100 nodelay;
            
            # Send response to Triton for validation
            proxy_pass http://triton_guardrails/v2/models/ensemble_guardrail/infer;
            proxy_method POST;
            proxy_set_header Content-Type "application/json";
            proxy_set_header Host $host;
            
            # Transform response body for Triton
            set $triton_payload '{"inputs":[{"name":"TEXT","shape":[1,1],"datatype":"BYTES","data":["$response_body"]}],"outputs":[{"name":"STATUS_CODE"},{"name":"RESULT"}]}';
            proxy_set_body $triton_payload;
        }
        
        location @validate_forecast_response {
            internal;
            limit_req zone=triton burst=100 nodelay;
            
            # Send response to Triton for validation
            proxy_pass http://triton_guardrails/v2/models/ensemble_guardrail/infer;
            proxy_method POST;
            proxy_set_header Content-Type "application/json";
            proxy_set_header Host $host;
            
            # Transform response body for Triton
            set $triton_payload '{"inputs":[{"name":"TEXT","shape":[1,1],"datatype":"BYTES","data":["$response_body"]}],"outputs":[{"name":"STATUS_CODE"},{"name":"RESULT"}]}';
            proxy_set_body $triton_payload;
        }
        
        location @validate_rag_response {
            internal;
            limit_req zone=triton burst=100 nodelay;
            
            # Send response to Triton for validation
            proxy_pass http://triton_guardrails/v2/models/ensemble_guardrail/infer;
            proxy_method POST;
            proxy_set_header Content-Type "application/json";
            proxy_set_header Host $host;
            
            # Transform response body for Triton
            set $triton_payload '{"inputs":[{"name":"TEXT","shape":[1,1],"datatype":"BYTES","data":["$response_body"]}],"outputs":[{"name":"STATUS_CODE"},{"name":"RESULT"}]}';
            proxy_set_body $triton_payload;
        }
    }
}